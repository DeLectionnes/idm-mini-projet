module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();



-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!Network (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		s_ready: petrinet!State(
				name <- wd.name + 'Ready',
				tokenNb <- 1,
				network <- wd.getProcess()),
		s_started: petrinet!State(
				name <- wd.name + 'Started',
				tokenNb <- 0,
				network <- wd.getProcess()),
		s_running: petrinet!State(
				name <- wd.name + 'Running',
				tokenNb <- 0,
				network <- wd.getProcess()),
		s_finished: petrinet!State(
				name <- wd.name + 'Finished',
				tokenNb <- 0,
				network <- wd.getProcess()),
		--Transitions d'une WD
		t_start: petrinet!Transition(
				name <- wd.name + 'Start',
				network <- wd.getProcess()),
		t_finish: petrinet!Transition(
				name <- wd.name + 'Finish',
				network <- wd.getProcess()),
		--Arcs d'une WD
		arc_ready2start: petrinet!Arc(
				towardState <- 0,
				towardTransition <- 1,
				state <- s_ready,
				transition <- t_start,
				network <- wd.getProcess()),
		arc_start2started: petrinet!Arc(
				towardState <- 1,
				towardTransition <- 0,
				state <- s_started,
				transition <- t_start,
				network <- wd.getProcess()),
		arc_start2running: petrinet!Arc(
				towardState <- 1,
				towardTransition <- 0,
				state <- s_running,
				transition <- t_start,
				network <- wd.getProcess()),
		arc_running2finish: petrinet!Arc(
				towardState <- 0,
				towardTransition <- 1,
				state <- s_running,
				transition <- t_finish,
				network <- wd.getProcess()),
		arc_finish2finished: petrinet!Arc(
				towardState <- 1,
				towardTransition <- 0,
				state <- s_finished,
				transition <- t_finish,
				network <- wd.getProcess())
}

rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to 
		readArc: petrinet!ReadArc(
			network <- ws.getProcess(),
			towardTransition <- 1,
			state <- if (ws.linkType = #startToStart or ws.linkType = #startToFinish) 
				then thisModule.resolveTemp(ws.predecessor, 's_started')
				else thisModule.resolveTemp(ws.predecessor, 's_finished')
				endif,
			transition <- if (ws.linkType = #startToStart  or ws.linkType = #finishToStart ) 
				then thisModule.resolveTemp(ws.successor,  't_start')
				else thisModule.resolveTemp(ws.successor,  't_finish')
				endif
		)
}

rule Ressource2PetriNet {
	from rs: simplepdl!Ressource 
	to
	state: petrinet!State(
		network <- rs.getProcess(),
		name <- 'Ressource'+rs.name,
		tokenNb <- rs.quantity)
}

rule RessourceSupply2PetriNet {
	from rss: simplepdl!RessourceSupply
	to
	arcLivraison: petrinet!Arc(
		network <- rss.getProcess(),
		towardState <- 0,
		towardTransition <- rss.quantityNeeded,
		state <- thisModule.resolveTemp(rss.predecessor, 'state' ),
		transition <- thisModule.resolveTemp(rss.successor,  't_start')
		),
		
	arcRecuperation: petrinet!Arc(
		network <- rss.getProcess(),
		towardState <- rss.quantityNeeded,
		towardTransition <- 0,
		state <- thisModule.resolveTemp(rss.predecessor, 'state' ),
		transition <- thisModule.resolveTemp(rss.successor,  't_finish'))
}
