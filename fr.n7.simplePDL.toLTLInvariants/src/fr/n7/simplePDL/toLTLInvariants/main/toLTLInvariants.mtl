[comment encoding = UTF-8 /]
[module toLTLInvariants('http://simplepdl')]


[template public processtoLTL(aProcess : Process)]
[comment @main/]
[comment file : *-invariants.ltl/]
[file (aProcess.name + '-invariants.ltl', false, 'UTF-8')]
[comment WD/]
[let wds : OrderedSet(WorkDefinition) = aProcess.getWDs() ] 
	[if (wds->size() > 0)]
		[for (wd : WorkDefinition | wds)][comment
			/][wd.WriteWD()/]

		[/for]
	[/if]
[/let]

[comment WS/]
[let wss : OrderedSet(WorkSequence) = aProcess.getWSs() ] 
	[if (wss->size() > 0)]
		[for (wd : WorkSequence | wss)][comment
			/][wd.WriteWS()/]
		[/for]
	[/if]
[/let]

[comment RS/]
[let rss : OrderedSet(Ressource) = aProcess.getRSs() ] 
	[if (rss->size() > 0)]
		[for (rs : Ressource | rss)][comment
			/][rs.WriteRS()/]
		[/for]
	[/if]
[/let]
[/file]
[/template]

[template public WriteWD(wd : WorkDefinition) post (trim()) ]
[let name : String = wd.name ]
<> ([name + 'Ready'/] => [name + 'Running'/]);
<> ([name + 'Ready'/] => [name + 'Started'/]);
[name + 'Running'/] => [name + 'Finished'/];

['[]'/] ([name + 'Ready + ' + name + 'Running + ' + name + 'Finished'/] = 1);
[/let]
[/template]

[template public WriteWS(ws : WorkSequence) post (trim()) ]
[let pred : String = ws.predecessor.name ]
	[let succ : String = ws.successor.name ]
		[if ws.linkType = WorkSequenceType::startToStart]
			[pred + 'Started'/] => [succ + 'Start'/];
		[else]
			[if ws.linkType = WorkSequenceType::finishToStart]
				[pred + 'Finished'/] => [succ + 'Start'/];
			[else]
				[if ws.linkType = WorkSequenceType::startToFinish]
					[pred + 'Started'/] => [succ + 'Finish'/];
				[else]
					[pred + 'Finished'/] => [succ + 'Finish'/];
				[/if]
			[/if]
		[/if]
	[/let]
[/let]
[/template]

[template public WriteRS(rs : Ressource) post (trim()) ]
['[]'/] ([rs.quantity + ' = Ressource' + rs.name/][comment
/][let rsLs : OrderedSet(RessourceSupply) = rs.linkToSequence][comment
	/][if (rsLs->size() > 0)]
		[for (rl : RessourceSupply | rsLs)][comment
			/][' + ' + rl.quantityNeeded + '*' + rl.successor.name + 'Running'/][comment
		/][/for]
	[/if]
[/let][comment
/]);
[/template]


[query public getWDs(p: Process) : OrderedSet(WorkDefinition) = 
	p.processElements->select( e | e.oclIsTypeOf(WorkDefinition) )
		->collect( e | e.oclAsType(WorkDefinition) )
		->asOrderedSet()
/]
[query public getWSs(p: Process) : OrderedSet(WorkSequence) = 
	p.processElements->select( e | e.oclIsTypeOf(WorkSequence) )
		->collect( e | e.oclAsType(WorkSequence) )
		->asOrderedSet()
/]
[query public getRSs(p: Process) : OrderedSet(Ressource) = 
	p.processElements->select( e | e.oclIsTypeOf(Ressource) )
		->collect( e | e.oclAsType(Ressource) )
		->asOrderedSet()
/]

